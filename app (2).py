# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DXJSNoh4MlHBFHr0RV_KEeJFWl8xTAT8
"""

import streamlit as st
import pandas as pd
import numpy as np
from PIL import Image
import pytesseract
import speech_recognition as sr
import tempfile, os
from rapidfuzz import process, fuzz
from geopy.geocoders import Nominatim
from geopy.distance import geodesic
import requests
import folium
from streamlit_folium import st_folium

# -------------------------
# Page setup with color theme
# -------------------------
st.set_page_config(page_title="üíä Smart Prescription Assistant", layout="wide")

st.markdown(
    """
    <style>
    .stApp {
        background-color: #f5f9ff;
    }
    .medicine-card {
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        color: white;
    }
    .cheap { background: #2ecc71; }   /* Green */
    .medium { background: #f39c12; }  /* Orange */
    .expensive { background: #e74c3c; } /* Red */
    </style>
    """,
    unsafe_allow_html=True
)

# -------------------------
# Load medicine dataset
# -------------------------
@st.cache_data
def load_medicine_data(path):
    df = pd.read_csv(path)
    df['price'] = pd.to_numeric(df['price'], errors='coerce')
    df['norm_name'] = df['name'].astype(str).str.lower()
    return df

data_path = "updated_indian_medicine_data.csv"
med_df = load_medicine_data(data_path)

# -------------------------
# Helper functions
# -------------------------
def normalize_text(s):
    return ''.join(ch if ch.isalnum() or ch.isspace() else ' ' for ch in s.lower()).strip()

def ocr_image(img):
    return pytesseract.image_to_string(img)

def speech_to_text(file_bytes):
    r = sr.Recognizer()
    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp:
        tmp.write(file_bytes)
        tmp_name = tmp.name
    with sr.AudioFile(tmp_name) as source:
        audio = r.record(source)
    try:
        text = r.recognize_google(audio)
    except:
        text = ""
    os.remove(tmp_name)
    return text

def fuzzy_match(query, med_df, top_n=5):
    results = process.extract(normalize_text(query), med_df['norm_name'], scorer=fuzz.WRatio, limit=top_n)
    out = []
    for _, score, idx in results:
        row = med_df.iloc[idx]
        out.append({
            "input": query,
            "matched_name": row['name'],
            "price": row['price'],
            "manufacturer": row.get('manufacturer_name', ''),
            "salt": row.get('salt_composition', ''),
            "score": score
        })
    return out

def find_cheapest(matches):
    df = pd.DataFrame(matches).dropna(subset=['price'])
    if df.empty:
        return None
    return df.sort_values("price").iloc[0]

# -------------------------
# UI
# -------------------------
st.title("üíä Smart Prescription Assistant")
st.markdown("Upload your **prescription (image or voice)** and get medicine suggestions with **cheapest alternatives** and nearby chemist shops üè™.")

tabs = st.tabs(["üì∑ Image OCR", "üé§ Voice Input", "‚å®Ô∏è Text Input", "üó∫Ô∏è Find Chemists"])

# -------- Image OCR --------
with tabs[0]:
    img_file = st.file_uploader("Upload prescription image", type=["jpg", "png", "jpeg"])
    if img_file:
        img = Image.open(img_file).convert("RGB")
        st.image(img, caption="Uploaded Prescription", use_column_width=True)
        with st.spinner("üîç Extracting text with OCR..."):
            extracted = ocr_image(img)
        st.success("‚úÖ OCR Complete!")
        st.text_area("Extracted Text", extracted, height=200)

# -------- Voice Input --------
with tabs[1]:
    audio_file = st.file_uploader("Upload prescription audio", type=["wav", "mp3", "m4a"])
    if audio_file:
        st.audio(audio_file)
        with st.spinner("üé§ Transcribing..."):
            extracted = speech_to_text(audio_file.read())
        st.success("‚úÖ Transcription Complete!")
        st.text_area("Transcribed Text", extracted, height=200)

# -------- Text Input --------
with tabs[2]:
    extracted = st.text_area("Enter prescription text manually", height=200)

# -------- Analysis --------
if st.button("üöÄ Analyze Prescription"):
    if not extracted.strip():
        st.error("‚ö†Ô∏è Please provide prescription text first.")
    else:
        items = [x.strip() for x in extracted.replace("\n", ",").split(",") if x.strip()]
        st.subheader("üìù Detected Medicines")
        st.write(items)

        st.subheader("üí° Suggestions & Cheapest Alternatives")
        for item in items:
            matches = fuzzy_match(item, med_df, top_n=5)
            cheapest = find_cheapest(matches)
            if cheapest:
                css_class = "cheap" if cheapest["price"] < 50 else "medium" if cheapest["price"] < 200 else "expensive"
                st.markdown(
                    f"""
                    <div class="medicine-card {css_class}">
                        <h4>{cheapest['matched_name']} ‚Äî ‚Çπ{cheapest['price']:.2f}</h4>
                        <p>Salt: {cheapest['salt']}</p>
                        <p>Manufacturer: {cheapest['manufacturer']}</p>
                        <p>Match Score: {cheapest['score']}</p>
                    </div>
                    """,
                    unsafe_allow_html=True
                )
            else:
                st.warning(f"No match found for **{item}**")

# -------- Find Chemists --------
with tabs[3]:
    addr = st.text_input("Enter your location (city/area)")
    if st.button("üîé Search Chemists"):
        if addr.strip():
            geolocator = Nominatim(user_agent="prescription_app")
            loc = geolocator.geocode(addr)
            if loc:
                st.success(f"üìç Found location: {loc.address}")
                m = folium.Map(location=[loc.latitude, loc.longitude], zoom_start=13)
                folium.Marker([loc.latitude, loc.longitude], tooltip="You", icon=folium.Icon(color="blue")).add_to(m)
                st_folium(m, width=700, height=500)
            else:
                st.error("‚ö†Ô∏è Could not find the address.")